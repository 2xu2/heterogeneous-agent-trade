import numpy as np
import scipy as sp
from hat_support import *

class HATmodel:

    def __init__(self, β, σ, α, φ, δ, σ_ε, N, P):
        self.β, self.σ, self.α, self.φ = β, σ, α, φ
        self.δ, self.σ_ε, self.N, self.P = δ, σ_ε, N, P

    def utility(self, c):
        σ = self.σ
        return ((1-σ)**(-1))*(c**(1-σ))

    def u_c(self, c):
        σ = self.σ        
        return c**(-σ)

    def u_c_inv(self, x):
        σ = self.σ        
        return x**(-1/σ) 

    def find_w(self, R, TFP):
        α, δ = self.α, self.δ
        return TFP*(1-α)*((R-1+δ)/(TFP*α))**(α/(α-1)) 

    def find_K(self, R, TFP, N):
        α, δ = self.α, self.δ
        return N*((R-1+δ)/(TFP*α))**(1/(α-1)) 

    def find_Y(self, K, TFP, N):
        α = self.α
        return TFP*(K**α)*(N**(1-α)) 

    def find_X(self, K):
        δ = self.δ 
        return δ*K 

    def coleman(self, agrid, zgrid, x, R, w, p):
        u_c, u_c_inv = self.u_c, self.u_c_inv
        β, φ, P, N = self.β, self.φ, self.P, self.N 
        find_value_function = self.find_value_function
        find_probabilities = self.find_probabilities

        # Unpack policy and value function
        gc = x[0:agrid.shape[0], :, :]
        v = x[agrid.shape[0]:, :, :]
 
        # Compute choice probabilities
        π = find_probabilities(v)

        # Integrate over ϵ
        Ev1 = np.zeros((agrid.shape[0], zgrid.shape[0]))
        for a_i, a in enumerate(agrid):
            for z_i, z in enumerate(zgrid):
                Ev1[a_i, z_i] = π[a_i, z_i,:] @ (u_c(gc[a_i, z_i,:])/p)                            

        # Integrate over z
        Ev = Ev1 @ P.T

        gc1 = np.empty_like(gc)
        ga1 = np.empty_like(gc)
        for i in range(N):
           
            # Build endogenous grid assuming interior solution
            endo_c = u_c_inv(p[i]*β*R*Ev)
            endo_a = (1/R)*(p[i]*endo_c+agrid[:,np.newaxis]-w*zgrid)

            # Interpolate to find new policy function
            ga1[:,:,i] = np.array([np.interp(agrid, endo_a[:, z_i], agrid) for z_i in range(len(zgrid))]).T

        # Back out consumption policy
        cih = zgrid*w + R*agrid[:,np.newaxis]
        gc1 = (cih[:,:,np.newaxis] - ga1)/p        

        v1 = find_value_function(agrid, zgrid, v, gc1, ga1)
        x1 = np.concatenate([gc1, v1])

        return x1 

    def find_value_function(self, agrid, zgrid, v, gc, ga):
        find_log_sum, utility = self.find_log_sum, self.utility
        P, N = self.P, self.N
        β = self.β

        for a_i, a in enumerate(agrid):
            for z_i, z in enumerate(zgrid): 
                for N_i in range(N):

                    # Compute Expectations 
                    Ev = 0
                    if ga[a_i, z_i, N_i] < agrid[0]:
                        Ev += P[z_i, :] @ find_log_sum(v[0, :, :], zgrid)
                    elif ga[a_i, z_i, N_i] >= agrid[-1]:
                        Ev += P[z_i, :] @ find_log_sum(v[agrid.shape[0]-1, :, :], zgrid)
                    else: 
                        idx = np.where(ga[a_i, z_i, N_i]>=agrid)[0][-1]
                        q = 1 - ((ga[a_i, z_i, N_i] - agrid[idx]) / (agrid[idx+1] - agrid[idx]))
                        Ev += q * P[z_i, :] @ find_log_sum(v[idx, :, :], zgrid)
                        Ev += (1-q) * P[z_i, :] @ find_log_sum(v[idx+1, :, :], zgrid)

                    v[a_i, z_i, N_i] = utility(gc[a_i, z_i, N_i]) + β*Ev

        return v

    def find_policies(self, agrid, zgrid, R, w, p):
        u_c, u_c_inv = self.u_c, self.u_c_inv
        coleman = self.coleman      
        φ, β, N = self.φ, self.β, self.N 

        # Initial guess for consumption policy
        gc0_vec = np.linspace(0.1, 3, agrid.shape[0])
        gc0 = np.repeat(np.repeat(gc0_vec[:,np.newaxis], zgrid.shape[0], axis=1)[:,:,np.newaxis], N, axis=2) 
        v0 = (-1)*np.ones((agrid.shape[0], zgrid.shape[0], N))/(1-β)
        x0 = np.concatenate([gc0, v0])

        # Find fixed point of coleman operator
        fun = lambda gc: coleman(agrid, zgrid, x0, R, w, p) - gc     
        gc = sp.optimize.anderson(fun, x0)
  
        # Find labor and asset policies
        ga = np.maximum(w*zgrid + R*agrid[:,np.newaxis] - gc, φ)

        return gc, gn, ga

    def find_probabilities(self, v):
        σ_ε = self.σ_ε

        v_temp = (v.T - np.max(v, axis=2).T).T
        return (np.exp(v_temp/σ_ε).T/np.exp(v_temp/σ_ε).sum(2).T).T

    def find_log_sum(self, vj, zgrid):
        σ_ε = self.σ_ε

        log_sum = np.array([σ_ε*np.log(np.sum(np.exp(vj[z_i, :]/σ_ε))) for z_i in range(len(zgrid))])

        return log_sum

    def find_transition_matrix(self, agrid, agrid_dense, zgrid, g):
        """
        Transition matrix for the vector s = [(a1,z1),...,(aM,z1),(a1,z2),...,(aM,z2),...(aM,zN)]'        
        """
        P = self.P

        # Interpolate policy function for the dense grid
        g_dense = np.array([np.interp(agrid_dense, agrid, g[:, z_i]) for z_i in range(len(zgrid))]).T

        # Find the transition matrix
        T = np.zeros((agrid_dense.size*zgrid.size, agrid_dense.size*zgrid.size))
        for z_i, z in enumerate(zgrid):
            for a_i, a in enumerate(agrid_dense):
                s_i = a_i + z_i*agrid_dense.size

                for zp_i, zp in enumerate(zgrid):
                    for ap_i, ap in enumerate(agrid_dense):
                        sp_i = ap_i + zp_i*agrid_dense.size
                    
                        if g_dense[a_i, z_i] >= agrid_dense[-1] and ap == agrid_dense[-1]:
                            T[s_i, sp_i] = P[z_i, zp_i]                    
                        elif agrid_dense[ap_i] <= g_dense[a_i, z_i] <= agrid_dense[ap_i+1]:
                            p = (g_dense[a_i, z_i]-agrid_dense[ap_i])/(agrid_dense[ap_i+1]-agrid_dense[ap_i]) 
                            T[s_i, sp_i] = (1-p) * P[z_i, zp_i]                    
                            T[s_i, sp_i+1] = p * P[z_i, zp_i]                    
        
        # Check that the transition matrix adds up to 1 for each row
        assert(np.allclose(T.sum(1), 1))

        return T

    def find_stationary_distribution(self, T):

        # Find eigenvalue closest to 1
        w, v = sp.sparse.linalg.eigs(T.T, k=1, sigma=1)

        # Find stationary distribution
        λ = np.real(v.flatten())

        return λ/λ.sum()

    def find_aggregate_var(self, g, agrid, agrid_dense, zgrid, λ):

        # Interpolate policy function for the dense grid
        g_dense = np.array([np.interp(agrid_dense, agrid, g[:, z_i]) for z_i in range(len(zgrid))]).T

        return np.dot(λ, g_dense.reshape(-1, order='F'))

    def residual(self, agrid, agrid_dense, zgrid, R, TFP):
        find_w, find_K, find_policies = self.find_w, self.find_K, self.find_policies
        find_transition_matrix = self.find_transition_matrix
        find_stationary_distribution = self.find_stationary_distribution
        find_aggregate_var = self.find_aggregate_var

        # Find Wages given R and TFP
        w = find_w(R, TFP)

        # Solve Consumer Problem
        gc, gn, ga = find_policies(agrid, zgrid, R, w)

        # Find transition matrix
        T = find_transition_matrix(agrid, agrid_dense, zgrid, ga)

        # Find stationary Distribution
        λ = find_stationary_distribution(T)

        # Find aggregates using policies and λ
        A = find_aggregate_var(ga, agrid, agrid_dense, zgrid, λ)
        N = find_aggregate_var(zgrid*gn, agrid, agrid_dense, zgrid, λ)

        # Find capital from FOCs of firm
        K = find_K(R, TFP, N)

        return A - K 

    def find_equilibrium(self, agrid, agrid_dense, zgrid, TFP):
        find_w, find_K, find_policies = self.find_w, self.find_K, self.find_policies
        find_Y, find_X = self.find_Y, self.find_X
        find_transition_matrix = self.find_transition_matrix
        find_stationary_distribution = self.find_stationary_distribution
        find_aggregate_var = self.find_aggregate_var
        β = self.β

        # Solve for market clearing interest rate
        R0 = 1 + 0.7*((1/β)-1)
        f = lambda R: self.residual(agrid, agrid_dense, zgrid, R, TFP)
        result = sp.optimize.root(f, R0)
        R = result.x[0]
        assert(result.success) # Check that the solver converged

        # Find Wages given R and TFP
        w = find_w(R, TFP)

        # Solve Consumer Problem
        gc, gn, ga = find_policies(agrid, zgrid, R, w)

        # Find transition matrix
        T = find_transition_matrix(agrid, agrid_dense, zgrid, ga)

        # Find stationary Distribution
        λ = find_stationary_distribution(T)

        # Find aggregates using policies and λ
        A = find_aggregate_var(ga, agrid, agrid_dense, zgrid, λ)
        C = find_aggregate_var(gc, agrid, agrid_dense, zgrid, λ)
        N = find_aggregate_var(zgrid*gn, agrid, agrid_dense, zgrid, λ)

        K = find_K(R, TFP, N)
        Y = find_Y(K, TFP, N)
        X = find_X(K)

        return AiyagariEquilibrium(R, w, gc, gn, ga, T, λ, A, C, N, X, K, Y)

    def backward_step(self, agrid, zgrid, gc, R, TFP):
        coleman = self.coleman
        u_c, u_n_inv = self.u_c, self.u_n_inv
        find_w = self.find_w
        φ = self.φ

        # Find wages given R and TFP
        w = find_w(R, TFP)

        # Find consumption policy
        gc = coleman(agrid, zgrid, gc, R, w)

        # Find labor and asset policies
        gn = np.minimum(np.maximum(u_n_inv(w*zgrid*u_c(gc)), 0), 1)
        ga = np.maximum(w*gn*zgrid + R*agrid[:,np.newaxis] - gc, φ)

        return gc, gn, ga

    def forward_step(self, agrid, agrid_dense, zgrid, gc, gn, ga, R, TFP, λ):
        find_transition_matrix = self.find_transition_matrix
        find_aggregate_var = self.find_aggregate_var
        find_K, find_Y, find_X = self.find_K, self.find_Y, self.find_X

        # Find transition matrix given asset policies
        T = find_transition_matrix(agrid, agrid_dense, zgrid, ga)

        # Find aggregates using policies and λ
        A = find_aggregate_var(ga, agrid, agrid_dense, zgrid, λ)
        C = find_aggregate_var(gc, agrid, agrid_dense, zgrid, λ)
        N = find_aggregate_var(zgrid*gn, agrid, agrid_dense, zgrid, λ)

        K = find_K(R, TFP, N)
        Y = find_Y(K, TFP, N)
        X = find_X(K)

        # Find λ_{t+1} = T_{t, t+1}' * λ_t 
        λp = T.T @ λ

        return λp, C, N, X, Y, K, A

    def transition_residual(self, agrid, agrid_dense, zgrid, TFP0, TFP_path, T_hat, R_path, eqlbrm0):
        find_equilibrium = self.find_equilibrium
        backward_step = self.backward_step
        forward_step = self.forward_step

        # TFP will follow TFP_path and then remain at TFP0 forever
        TFP_path_full = TFP_path + [TFP0]*(T_hat - len(TFP_path))

        # Initialize arrays
        gc_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        gn_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        ga_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        residual = np.empty(T_hat)

        # TFP in original steady state was TFP0 when news of TFP_path arrives in period 0
        # TFP will be back at TFP0 in period T_hat 
        gc, gn, ga = eqlbrm0.gc, eqlbrm0.gn, eqlbrm0.ga      
        gc_path[:,:,T_hat-1], gn_path[:,:,T_hat-1], ga_path[:,:,T_hat-1] = gc, gn, ga
        R_path[T_hat-1] = eqlbrm0.R

        # Backward step
        for t in range(T_hat-2, -1, -1):       
            gc = gc_path[:,:,t+1]
            R = R_path[t+1]
            TFP = TFP_path_full[t+1]
            gc, gn, ga = backward_step(agrid, zgrid, gc, R, TFP)
            gc_path[:,:,t], gn_path[:,:,t], ga_path[:,:,t] = gc, gn, ga

        # Forward step
        λ = eqlbrm0.λ
        for t in range(T_hat):       
            gc, gn, ga = gc_path[:,:,t], gn_path[:,:,t], ga_path[:,:,t]
            R = R_path[t]
            TFP = TFP_path_full[t]
            λp, C, N, X, Y, K, A = forward_step(agrid, agrid_dense, zgrid, gc, gn, ga, R, TFP, λ)
            residual[t] = A - K 
            λ = λp           

        return residual

    def find_transiton_path(self, agrid, agrid_dense, zgrid, TFP0, TFP_path, T_hat):
        transition_residual = self.transition_residual
        find_equilibrium = self.find_equilibrium
        backward_step = self.backward_step
        forward_step = self.forward_step
        find_w = self.find_w

        # TFP will follow TFP_path and then remain at TFP0 forever
        TFP_path_full = TFP_path + [TFP0]*(T_hat - len(TFP_path))

        # Initialize arrays
        gc_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        gn_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        ga_path = np.empty((agrid.size, zgrid.size, T_hat), dtype = np.float64)
        C_path, N_path = np.empty(T_hat), np.empty(T_hat) 
        X_path, Y_path = np.empty(T_hat), np.empty(T_hat)
        K_path = np.empty(T_hat)

        # TFP in original steady state was TFP0 when news of TFP_path arrives in period 0
        # TFP will be back at TFP0 in period T_hat 
        eqlbrm0 = find_equilibrium(agrid, agrid_dense, zgrid, TFP0)
        gc, gn, ga = eqlbrm0.gc, eqlbrm0.gn, eqlbrm0.ga      
        gc_path[:,:,T_hat-1], gn_path[:,:,T_hat-1], ga_path[:,:,T_hat-1] = gc, gn, ga

        # Solve for interest rate path
        R_path0 = [eqlbrm0.R]*len(TFP_path_full)
        f = lambda R_path: transition_residual(agrid, agrid_dense, zgrid, TFP0, TFP_path, T_hat, R_path, eqlbrm0)
        res = f(R_path0)
        result = sp.optimize.root(f, R_path0)
        R_path = result.x
        assert(result.success) # Check that the solver converged

        # Store equilibrium wages
        w_path = [find_w(R_path[i], TFP_path_full[i]) for i in range(len(R_path))]

        # Backward step
        for t in range(T_hat-2, -1, -1):       
            gc = gc_path[:,:,t+1]
            R = R_path[t+1]
            TFP = TFP_path_full[t+1]
            gc, gn, ga = backward_step(agrid, zgrid, gc, R, TFP)
            gc_path[:,:,t], gn_path[:,:,t], ga_path[:,:,t] = gc, gn, ga

        # Forward step
        λ = eqlbrm0.λ
        for t in range(T_hat):       
            gc, gn, ga = gc_path[:,:,t], gn_path[:,:,t], ga_path[:,:,t]
            R = R_path[t]
            TFP = TFP_path_full[t]
            λp, C, N, X, Y, K, A = forward_step(agrid, agrid_dense, zgrid, gc, gn, ga, R, TFP, λ)
            residual[t] = A - K 
            λ = λp           

        return AiyagariTransition(eqlbrm0, C_path, N_path, X_path, Y_path, K_path, TFP_path_full, R_path, w_path)

class AiyagariEquilibrium:

    def __init__(self, R, w, gc, gn, ga, T, λ, A, C, N, X, K, Y):
        self.R, self.w, self.gc, self.gn, self.ga = R, w, gc, gn, ga
        self.T, self.λ, self.A, self.C = T, λ, A, C 
        self.N, self.X, self.K, self.Y = N, X, K, Y

class AiyagariTransition:

    def __init__(self, eqlbrm, C, N, X, Y, K, TFP, R, w):
        self.eqlbrm = eqlbrm
        self.C, self.N, self.X, self.Y, self.K  = C, N, X, Y, K
        self.TFP, self.R, self.w = TFP, R, w


